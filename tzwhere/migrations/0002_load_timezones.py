# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-06-13 23:08
from __future__ import unicode_literals

import gzip
import json

from django.contrib.gis.geos import GEOSGeometry, MultiPolygon
from django.db import migrations

from tzwhere.tzwhere import tzwhere


def load_timezones(apps, schema_editor):
    Timezone = apps.get_model('tzwhere', 'Timezone')

    with gzip.open(tzwhere.DEFAULT_POLYGONS, 'rb') as f:
        featureCollection = json.loads(f.read().decode('utf-8'))

    for name, poly in feature_collection_polygons(featureCollection):
        Timezone.objects.create(
            name=name,
            polygon=MultiPolygon([poly]),
        )


def delete_timezones(apps, schema_editor):
    Timezone = apps.get_model('tzwhere', 'Timezone')
    Timezone.objects.all().delete()


def feature_collection_polygons(featureCollection):
    """Turn a feature collection
    into an iterator over polygons.

    Given a featureCollection of the kind loaded from the json
    input, unpack it to an iterator which produces a series of
    (tzname, polygon) pairs, one for every polygon in the
    featureCollection.  Here tzname is a string and polygon is a
    list of floats.

    """
    for feature in featureCollection['features']:
        tzname = feature['properties']['TZID']
        if feature['geometry']['type'] == 'Polygon':
            poly = GEOSGeometry(json.dumps(feature['geometry']))
            yield (tzname, poly)


class Migration(migrations.Migration):
    dependencies = [
        ('tzwhere', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_timezones, delete_timezones),
    ]
